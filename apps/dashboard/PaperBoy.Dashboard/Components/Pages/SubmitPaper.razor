@page "/papers/submit"
@rendermode ServerInteractive
@using PaperBoy.Dashboard.Clients.Orchestrator
@inject IOrchestratorClient Orchestrator
@inject NavigationManager Navigation

<EditForm Model="_paper" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-4">
        <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
        <InputText id="title" class="mt-1 block w-full" @bind-Value="_paper.Title" />
        <ValidationMessage For="@(() => _paper.Title)" />
    </div>

    <div class="mb-4">
        <label for="url" class="block text-sm font-medium text-gray-700">URL</label>
        <InputText id="url" class="mt-1 block w-full" @bind-Value="_paper.Url" />
        <ValidationMessage For="@(() => _paper.Url)" />
    </div>

    <div class="mb-4">
        <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
        <InputText id="name" class="mt-1 block w-full" @bind-Value="_paper.Name" />
        <ValidationMessage For="@(() => _paper.Name)" />
    </div>

    <div class="mb-4">
        <label for="email" class="block text-sm font-medium text-gray-700">E-mail Address</label>
        <InputText id="email" class="mt-1 block w-full" @bind-Value="_paper.EmailAddress" />
        <ValidationMessage For="@(() => _paper.EmailAddress)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private PaperSubmissionModel _paper = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            await Orchestrator.SubmitPaperAsync(_paper.Title, _paper.Url, _paper.Name, _paper.EmailAddress);
            Navigation.NavigateTo("/thank-you");
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show error message to the user)
        }
    }

    private class PaperSubmissionModel
    {
        [Required]
        public string Title { get; set; } = string.Empty;

        [Required]
        [Url]
        public string Url { get; set; } = string.Empty;

        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string EmailAddress { get; set; } = string.Empty;
    }
}
